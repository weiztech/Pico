---
- name: Deploy Application
  hosts: demo
  become: true
  remote_user: root

  vars_files:
    - demo-vault.yml

  vars:
    container_name: "your_container_name"
    image_name: "your_image_name"
    project_deployed_path: "/home/dockeruser/CiteMedical/"
    project_root: "../.."
    inventory_file: "./inventory.yml"
    build_log_dir: "/home/{{ ansible_user }}/build_logs"

  tasks:
    - name: Sync project files
      synchronize:
        src: "{{ project_root }}/"
        dest: "{{ project_deployed_path }}"
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=*.pyc"
          - "--exclude=__pycache__"
          - "--exclude=venv"
          - "--exclude=.env"
        delete: yes


    - name: Update apt cache
      apt:
        update_cache: yes
      become: true

    - name: Install Python development packages and build dependencies
      apt:
        pkg:
          - python3-dev
          - python3-pip
          - python3-venv
          - python3-venv
          - build-essential
          - gcc
          - libpq-dev  # for psycopg2
          - python3-setuptools
          - python3-wheel
          - git  # often needed for pip requirements from git
        state: present
      become: true

    - name: Install dependencies
      apt:
        name:
          - python3-pip
        state: present

#    - name: Install pip requirements
#      pip:
#        requirements: "{{ project_deployed_path }}/requirements.txt"
#        virtualenv: "{{ project_deployed_path }}/../venv"
#        extra_args: --no-deps --no-cache-dir
#      environment:
#        MAKEFLAGS: "-j2"


        #state: present
            # - docker.io

    #        virtualenv: /home/dockeruser/CiteMedical/venv
    #        virtualenv_command: python3 -m venv
           # update_cache: yes
          #become: false

#    - name: Install docker-compose
#      pip:
#        name: docker-compose>=1.7.0
#        state: present
#        virtualenv: /home/dockeruser/venv
#        virtualenv_command: python3 -m venv
      #become: false


    - name: Create .env file
      template:
        src: "env.j2"
        dest: "{{ project_deployed_path }}/.env"
        mode: '0600'
      vars:
        env_vars:
          ENV: "{{ vault_ENV }}"
          AI_API_URL: "{{ vault_AI_API_URL }}"
          ALLOWED_HOSTS: "{{ vault_ALLOWED_HOSTS }}"
          APP_VERSION: "{{ vault_APP_VERSION }}"
          AWS_ACCESS_KEY_ID: "{{ vault_AWS_ACCESS_KEY_ID }}"
          AWS_S3_REGION_NAME: "{{ vault_AWS_S3_REGION_NAME }}"
          AWS_SECRET_ACCESS_KEY: "{{ vault_AWS_SECRET_ACCESS_KEY }}"
          AWS_STORAGE_BUCKET_NAME: "{{ vault_AWS_STORAGE_BUCKET_NAME }}"
          CELERY_DEFAULT_QUEUE: "{{ vault_CELERY_DEFAULT_QUEUE }}"
          CELERY_DEDUPLICATION_QUEUE: "{{ vault_CELERY_DEDUPLICATION_QUEUE }}"
          CHROMEDRIVER_PATH: "{{ vault_CHROMEDRIVER_PATH }}"
          CORS_ALLOWED_ORIGINS: "{{ vault_CORS_ALLOWED_ORIGINS }}"
          DEFAULT_FILE_STORAGE: "{{ vault_DEFAULT_FILE_STORAGE }}"
          CLOUDAMQP_URL: "{{ vault_CLOUDAMQP_URL }}"
          GOOGLE_CHROME_BIN: "{{ vault_GOOGLE_CHROME_BIN }}"
          PROXY_HOST: "{{ vault_PROXY_HOST }}"
          PROXY_PASS: "{{ vault_PROXY_PASS }}"
          PROXY_PORT: "{{ vault_PROXY_PORT }}"
          PROXY_USER: "{{ vault_PROXY_USER }}"
          PROXY_API_KEY: "{{ vault_PROXY_API_KEY }}"
          RELEASE_NOTES_LINK: "{{ vault_RELEASE_NOTES_LINK }}"
          SECRET_KEY: "{{ vault_SECRET_KEY }}"
          DATABASE_URL: "{{ vault_DATABASE_URL }}"
          PUBMED_API_KEY: "{{ vault_PUBMED_API_KEY }}"
          SUPPORT_EMAILS: "{{ vault_SUPPORT_EMAILS }}"
          MAILGUN_SERVER_NAME: "{{ vault_MAILGUN_SERVER_NAME }}"
          MAILGUN_ACCESS_KEY: "{{ vault_MAILGUN_ACCESS_KEY }}"
          HIDE_DISALLOWED_HOST_ERRORS: "{{ vault_HIDE_DISALLOWED_HOST_ERRORS }}"
          SITE_URL: "{{ vault_SITE_URL }}"
          GOOGLE_API_KEY: "{{ vault_GOOGLE_API_KEY }}"
          ACTIVE_CAMPAIGN_API_URL: "{{ vault_ACTIVE_CAMPAIGN_API_URL }}"
          ACTIVE_CAMPAIGN_API_KEY: "{{ vault_ACTIVE_CAMPAIGN_API_KEY }}"
          TEMPATE_PROJECT_ID: "{{ vault_TEMPATE_PROJECT_ID }}"


    - name: Stop containers
      community.docker.docker_compose_v2:
        project_src: "/home/dockeruser/CiteMedical/"
        state: stopped

    - name: Deploy with docker-compose
      community.docker.docker_compose_v2:
        project_src: "{{ project_deployed_path }}"
        state: present
        build: always
        recreate: always

    - name: Run database migrations
      command: docker compose -f {{ project_deployed_path }}/docker-compose.yml run --rm web python manage.py migrate
      register: migration_result
      ignore_errors: yes

    - name: collect static files
      command: docker compose -f {{ project_deployed_path }}/docker-compose.yml run --rm web python manage.py collectstatic --noinput
      register: collect_result
      ignore_errors: yes

    # Testing taking way to long comment for now and figure out a way to make it optional in the future
    
    # - name: Run Django tests
    #   command: docker compose -f {{ project_deployed_path }}/docker-compose.yml run --rm web python manage.py test --verbosity=2
    #   register: test_result
    #   ignore_errors: no

    # - name: Show test output
    #   debug:
    #     var: test_result.stdout_lines

    - name: Remove unused images
      command: docker image prune -f

    - name: Remove dangling images
      command: docker image prune -f --filter "dangling=true"

    - name: Print completion message
      ansible.builtin.debug:
        msg: "Deployment complete! Application now available at https://staging1.citemed.io"