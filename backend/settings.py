"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import dj_database_url
from dotenv import load_dotenv
from django.core.exceptions import DisallowedHost
from .logger import logger 


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
logger.info("Will watch for changes in these directories: {}", BASE_DIR)

PATH_TO_DOT_ENV_FILE = os.path.join(BASE_DIR, ".env")
if os.path.exists(PATH_TO_DOT_ENV_FILE):
    load_dotenv(PATH_TO_DOT_ENV_FILE)
    logger.info(".env read successfully")
else:
    logger.warning(".env not found")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "Ensure you set a secret key, this is important!")
PUBMED_API_KEY = os.getenv("PUBMED_API_KEY", None) 

SERVER_HOSTS_ENV = os.getenv("ALLOWED_HOSTS", "")
SERVER_HOSTS_ENV = SERVER_HOSTS_ENV.split(",") if SERVER_HOSTS_ENV else []
logger.debug("ALLOWED_HOSTS: "+str(SERVER_HOSTS_ENV))
ALLOWED_HOSTS = SERVER_HOSTS_ENV

CORS_ORIGINS_ENV = os.getenv("CORS_ALLOWED_ORIGINS", "")
CORS_ORIGINS_ENV = CORS_ORIGINS_ENV.split(",") if CORS_ORIGINS_ENV else []
logger.debug("CORS_ALLOWED_ORIGINS: "+str(CORS_ORIGINS_ENV))
CORS_ALLOWED_ORIGINS = CORS_ORIGINS_ENV
CSRF_TRUSTED_ORIGINS = CORS_ORIGINS_ENV

COCHRANE_LOGIN_EMAIL=os.getenv("COCHRANE_LOGIN_EMAIL", None)
COCHRANE_LOGIN_PASS=os.getenv("COCHRANE_LOGIN_PASS", None) 
DISABLE_HEADLESS_SCRAPER= os.getenv("DISABLE_HEADLESS_SCRAPER", None) 
DISABLE_CHROME_OPTIONS= os.getenv("DISABLE_CHROME_OPTIONS", False) 

TEMPATE_PROJECT_ID = os.getenv("TEMPATE_PROJECT_ID", None)

ENV = os.getenv("ENV")
logger.info("Environment: {}", ENV)
if ENV not in ["STAGING", "DEV", "PROD"]:
    logger.warning("ENV: {} not supported", ENV)

DEBUG = ENV != "PROD"

prod_debug_override = os.getenv("DEBUG", None)
if prod_debug_override:
    DEBUG = True

remove_debug = os.getenv("REMOVE_DEBUG", None)
if remove_debug:
    DEBUG = False

logger.info("Debug mode: {}", DEBUG)

SSL_OVERRIDE = os.getenv("SSL_OVERRIDE", 'false').lower() == 'true'

# Celery stuff heroku
if ENV == "PROD":
    CELERY_BROKER_URL = os.getenv("CLOUDAMQP_URL")
else:
    CELERY_BROKER_URL = os.getenv("DEVELOP_CLOUDAMQP_URL")
    
logger.info("Broker url: {}", CELERY_BROKER_URL)

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERYD_HIJACK_ROOT_LOGGER=False
CELERY_DEFAULT_QUEUE = os.getenv("CELERY_DEFAULT_QUEUE", None)
CELERY_DEDUPLICATION_QUEUE = os.getenv("CELERY_DEDUPLICATION_QUEUE", CELERY_DEFAULT_QUEUE)

if CELERY_DEFAULT_QUEUE:
    CELERY_TASK_DEFAULT_QUEUE = CELERY_DEFAULT_QUEUE
    # CELERY_ROUTES = {
    #     'lit_reviews.tasks.remove_duplicate_async': {'queue': CELERY_DEFAULT_QUEUE + "-DEDUPLICATION"},
    # }

#######################################################

# Application definition

INSTALLED_APPS = [
    "daphne",

    # Default apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    
    # Custom apps
    "lit_reviews",
    "accounts",
    "client_portal",
    'admin_side',

    # Installed apps
    "corsheaders",
    "crispy_forms",
    "crispy_bootstrap4",
    "storages",
    "floppyforms",
    "django_extensions",
    's3direct',
    'rest_framework',
    'actstream',
]

MIDDLEWARE = [
    # Default middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom middleware
    "accounts.middleware.RequireLoginMiddleware",
    # "accounts.middleware.RequirePermissionMiddleware",
    # Installed middleware whitenoise
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # User middleware
    "lit_reviews.middleware.CurrentUserMiddleware",
    # check user subscription middlware
    'lit_reviews.middleware.SubscriptionCheckMiddleware',
]

# SSL CONFIG
if ENV == "PROD":
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "templates",
            "forms/templates/",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "lit_reviews.context_processors.literature_review_id",
                'accounts.context_processors.subscription_type',
            ],
            'libraries':{
                'template_filters': 'lit_reviews.template_filters',
            }
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {}

if ENV == "PROD":
    DATABASES["default"] = dj_database_url.config(default=os.getenv("DATABASE_URL"))
elif ENV == "STAGING":
    DATABASES["default"] = dj_database_url.config(
        env="STAGING_DATABASE_URL", default=os.getenv("STAGING_DATABASE_URL")
    )
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

DATABASES["default"]["DISABLE_SERVER_SIDE_CURSORS"] = True
#logger.info("Database connection: {}", DATABASES["default"]["NAME"])
DB_NAME = DATABASES["default"]["NAME"]
DB_HOST = DATABASES["default"]["HOST"]
logger.info(f"Database connection: {DB_HOST} {DB_NAME}")

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# authentication
AUTH_USER_MODEL = "accounts.User"
LOGIN_URL = "/login/"
LOGIN_REQUIRED_URLS = (r"*",)
LOGIN_REQUIRED_URLS_EXCEPTIONS = ()

# Authentication backends
AUTHENTICATION_BACKENDS = ("accounts.backends.UserAuthBackend",)

# Required URLs for anonymous users
LOGIN_REQUIRED_URLS_EXCEPTIONS = [
    r".*/login.*",
    r".*/logout.*",
    r".*/reset_password.*",
    r".*/reset_password_done.*",
    r".*/reset_password_complete.*",
    r".*/anonymous_request_help",
    r".*/register",
    r".*/join-citemed-io",
    # r".*/documents_library",
    r".*/citemed_ms_word_extention",
]

# Restricted URLs for client user
RESTRICTED_URLS = [
    r".*/literature_reviews.*",
]

# django-crispy-forms
CRISPY_TEMPLATE_PACK = "bootstrap4"

AWS_S3_ENDPOINT_URL = 'https://s3.amazonaws.com'
# AWS config
if ENV in ["STAGING", "PROD"]:
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    DEFAULT_FILE_STORAGE = os.getenv("DEFAULT_FILE_STORAGE")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
    S3UPLOAD_REGION = os.getenv("AWS_S3_REGION_NAME")

if ENV == "PROD":
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
elif ENV == "STAGING":
    AWS_STORAGE_BUCKET_NAME = os.getenv("STAGING_AWS_STORAGE_BUCKET_NAME")
else:
    AWS_STORAGE_BUCKET_NAME = None
logger.info("AWS_STORAGE_BUCKET_NAME: {}", AWS_STORAGE_BUCKET_NAME)

# Mailgun config
if ENV in ["STAGING", "PROD"]:
    EMAIL_BACKEND = "django_mailgun.MailgunBackend"
    MAILGUN_ACCESS_KEY = os.getenv("MAILGUN_ACCESS_KEY")
    logger.info("EMAIL_BACKEND: {}", EMAIL_BACKEND)
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    logger.info("EMAIL_BACKEND: {}", EMAIL_BACKEND)


SUPPORT_EMAILS=os.getenv("SUPPORT_EMAILS", None)
if SUPPORT_EMAILS:
    SUPPORT_EMAILS = SUPPORT_EMAILS.split(",")

DEFAULT_FROM_EMAIL = "support@citemedical.com"
if ENV == "PROD":
    MAILGUN_SERVER_NAME = os.getenv("MAILGUN_SERVER_NAME")
    logger.info("MAILGUN_SERVER_NAME: {}", MAILGUN_SERVER_NAME)
elif ENV == "STAGING":
    MAILGUN_SERVER_NAME = os.getenv("STAGING_MAILGUN_SERVER_NAME")
    logger.info("MAILGUN_SERVER_NAME: {}", MAILGUN_SERVER_NAME)

SERVER_EMAIL = "support@citemedical.com"
ADMINS = []
if SUPPORT_EMAILS:
    for email in SUPPORT_EMAILS:
        ADMINS.append((email.split("@")[0] ,email))
    logger.info(f"Admins: {ADMINS}")

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
logger.info("MEDIA_ROOT: {}", MEDIA_ROOT)

MEDIA_URL = "/media/"

if not os.path.isdir(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)
    logger.info("{} was created.", MEDIA_ROOT)

if ENV == "DEV":
    FULL_TMP_ROOT = os.path.join(MEDIA_ROOT, "tmp")
else:
    FULL_TMP_ROOT = os.path.join(BASE_DIR, "tmp")

TMP_ROOT = "tmp/"
logger.info("TMP_ROOT: {}", TMP_ROOT)

if not os.path.isdir(TMP_ROOT):
    os.mkdir(TMP_ROOT)
    logger.info("{} was created.", TMP_ROOT)

SITE_URL = os.getenv("SITE_URL", None)

LOGIN_REDIRECT_URL="literature_reviews:literature_review_list"

# debug tool bar no longer needed
# debug_toolbar settings
# if DEBUG:
#     INTERNAL_IPS = ("127.0.0.1",)
#     MIDDLEWARE += ("debug_toolbar.middleware.DebugToolbarMiddleware",)
#     INSTALLED_APPS += ("debug_toolbar",)
#     DEBUG_TOOLBAR_CONFIG = {
#         "INTERCEPT_REDIRECTS": False,
#     }

# S3UPLOAD_DESTINATIONS = {
#     'citemied_files': {
#         # REQUIRED
#         'key': 'uploads/images',
#         # OPTIONAL
#         'acl': 'private', # Defaults to 'public-read'
#     }
# }

S3DIRECT_DESTINATIONS = {
    'citemied_files': {
        'key': 'uploads/files',
        'content_disposition': lambda x: 'attachment; filename="{}"'.format(x),
        'server_side_encryption': 'AES256',
        'allow_existence_optimization': True,
        'acl': 'private', # Defaults to 'public-read'
    },
    'final_zip_destination': {
      
        'key': 'uploads/final_zips',
        'content_disposition': lambda x: 'attachment; filename="{}"'.format(x),
        'server_side_encryption': 'AES256',
        'allow_existence_optimization': False,
    },
    'example_destination_two': {
        'key': lambda filename, args: args + '/' + filename,
        'key_args': 'uploads/files',
    }
}

APP_VERSION = os.getenv("APP_VERSION")
RELEASE_NOTES_LINK = os.getenv("RELEASE_NOTES_LINK")

# PROXY CREDS
PROXY_USER = os.getenv("PROXY_USER")
PROXY_PASS = os.getenv("PROXY_PASS")
PROXY_PORT = os.getenv("PROXY_PORT")
PROXY_HOST = os.getenv("PROXY_HOST")
PROXY_API_KEY = os.getenv("PROXY_API_KEY")

APPEND_SLASH = True

CREDITS_PURCHASE_LINK = "https://buy.stripe.com/6oEg2S1yv1jv3OU14a"

# LOGGING

HIDE_DISALLOWED_HOST_ERRORS=os.getenv("HIDE_DISALLOWED_HOST_ERRORS", "")
HIDE_DISALLOWED_HOST_ERRORS = True if HIDE_DISALLOWED_HOST_ERRORS != "false" else False 
def skip_disallowed_host_error(record):
    if record.exc_info:
        exc_type, exc_value = record.exc_info[:2]
        if isinstance(exc_value, DisallowedHost) and HIDE_DISALLOWED_HOST_ERRORS:
            return False
    return True

# Channels
ASGI_APPLICATION = "backend.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [CELERY_BROKER_URL],
        },
    },
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "skip_disallowed_host_errors": {
            "()": "django.utils.log.CallbackFilter",
            "callback": skip_disallowed_host_error,
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false", "skip_disallowed_host_errors"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
    },
}