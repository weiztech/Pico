# Generated by Django 3.0.2 on 2021-10-12 17:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addressee', models.TextField()),
                ('attn', models.TextField(blank=True, null=True)),
                ('street_number', models.TextField()),
                ('street', models.TextField()),
                ('unit', models.TextField(blank=True, null=True)),
                ('city', models.TextField()),
                ('state_or_province', models.TextField()),
                ('country', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_uid', models.TextField()),
                ('event_type', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('manufacturer', models.TextField()),
                ('event_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEventDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('url', models.URLField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEventProductCodes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=150)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEventRegulatoryBody',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdverseRecall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_uid', models.TextField()),
                ('product_description', models.TextField()),
                ('recall_class', models.IntegerField()),
                ('trade_name', models.TextField()),
                ('firm_name', models.TextField()),
                ('recall_reason', models.TextField()),
                ('event_date', models.DateField(blank=True, null=True)),
                ('db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventDatabase')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('abstract', models.TextField()),
                ('citation', models.TextField()),
                ('pubmed_uid', models.TextField(blank=True, null=True, unique=True)),
                ('pmc_uid', models.TextField(blank=True, null=True, unique=True)),
                ('full_text', models.FileField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('U', 'Unclassified'), ('I', 'Retained'), ('M', 'Maybe'), ('E', 'Excluded'), ('D', 'Duplicate')], default='U', max_length=1)),
                ('exclusion_reason', models.CharField(blank=True, max_length=1000, null=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.Article')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('short_name', models.TextField()),
                ('long_name', models.TextField()),
                ('logo', models.ImageField(null=True, upload_to='')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Address')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('classification', models.CharField(blank=True, max_length=100, null=True)),
                ('markets', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # ('authorized_users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Client')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='NCBIDatabase',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False, unique=True)),
                ('entrez_enum', models.CharField(max_length=30)),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reviewer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.TextField()),
                ('last_name', models.TextField()),
                ('credentials', models.TextField(blank=True, null=True)),
                ('display_override', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SearchProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_description', models.TextField(blank=True, null=True)),
                ('intended_use', models.TextField(blank=True, null=True)),
                ('equivalence_discussion_clinical', models.TextField(blank=True, null=True)),
                ('equivalence_discussion_technical', models.TextField(blank=True, null=True)),
                ('equivalence_discussion_biological', models.TextField(blank=True, null=True)),
                ('begin_date', models.DateField(auto_now_add=True)),
                ('literature_review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_performed', models.DateTimeField(auto_now_add=True)),
                ('in_abstract', models.BooleanField(default=False)),
                ('full_text_available', models.BooleanField(default=False)),
                ('term', models.CharField(max_length=150)),
                ('is_sota_term', models.BooleanField(blank=True, default=None, null=True)),
                ('years_back', models.FloatField()),
                ('result_count', models.IntegerField(blank=True, null=True)),
                ('db', models.ForeignKey(default='PubMed Central', on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.NCBIDatabase')),
                ('literature_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureReviewSearchProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('in_abstract', models.BooleanField(default=True)),
                ('full_text_available', models.BooleanField(default=True)),
                ('is_sota_term', models.BooleanField(default=False)),
                ('term', models.CharField(max_length=150)),
                ('years_back', models.FloatField()),
                ('result_count', models.IntegerField(null=True)),
                ('datetype', models.CharField(choices=[('pdat', 'Publication Date'), ('edat', 'Entrez Date')], default='pdat', max_length=10)),
                ('db', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.NCBIDatabase')),
                ('literature_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureReviewProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('due_date', models.DateField()),
                ('literature_review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureReviewIntake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('markets', models.TextField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Client')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Device')),
            ],
        ),
        migrations.AddField(
            model_name='literaturereview',
            name='intake',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.LiteratureReviewIntake'),
        ),
        migrations.CreateModel(
            name='KeyWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('population', models.TextField(blank=True, null=True)),
                ('intervention', models.TextField(blank=True, null=True)),
                ('comparison', models.TextField(blank=True, null=True)),
                ('outcome', models.TextField(blank=True, null=True)),
                ('exclusion', models.TextField(blank=True, null=True)),
                ('literature_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
            ],
        ),
        migrations.CreateModel(
            name='FullTextRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('Q', 'Requested'), ('R', 'Received')], default='Q', max_length=1)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Article')),
            ],
        ),
        migrations.CreateModel(
            name='ExclusionReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('literature_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
            ],
        ),
        migrations.CreateModel(
            name='EquivalentDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Device')),
                ('equivalent_to', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='equivalent_to', to='lit_reviews.Device')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lit_reviews.Manufacturer'),
        ),
        migrations.CreateModel(
            name='ClinicalLiteratureAppraisal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sota_exclusion_reason', models.CharField(blank=True, choices=[('NC', 'Describes technical or non-clinical study results only, including animal or cadaver studies'), ('OP', 'Contains unsubstantiated opinions'), ('KN', 'Do not represent the current knowledge/state of the art'), ('AG', 'Articles is older than 5 years'), ('EN', 'Non-English Language'), ('PU', 'Publications types other than Peer reviewed guidelines, International peer reviewed consensus statements, State of the Art review (can be narrative review), systematic review, or Meta-Analysis')], max_length=2, null=True)),
                ('sota_suitability', models.CharField(blank=True, choices=[('CK0', 'CK0: No SoTA Information'), ('CK1', 'CK1: Establishment of current knowledge/ the state of the art on the medical condition'), ('CK2', 'CK2: Establishment of current knowledge/ the state of the art on alternative therapies/treatments'), ('CK3', 'CK3: Determination and justification of criteria for the evaluation of the risk/benefit relationship'), ('CK4', 'CK4: Determination and justification of criteria for the evaluation of acceptability of undesirable side-effects'), ('CK5', 'CK5: Determination of equivalence'), ('CK6', 'CK6: Justification of the validity of surrogate endpoints')], max_length=3, null=True)),
                ('appropriate_device', models.CharField(blank=True, choices=[('D1', 'Actual Device'), ('D2', 'Similar Device'), ('D3', 'Other Device')], max_length=2, null=True)),
                ('appropriate_application', models.CharField(blank=True, choices=[('A1', 'Same Use'), ('A2', 'Minor Deviation'), ('A3', 'Major Deviation')], max_length=2, null=True)),
                ('appropriate_patient_group', models.CharField(blank=True, choices=[('P1', 'Applicable'), ('P2', 'Limited'), ('P3', 'Different Population')], max_length=2, null=True)),
                ('acceptable_collation_choices', models.CharField(blank=True, choices=[('R1', 'High Quality'), ('R2', 'Minor Deficiencies'), ('R3', 'Insufficient Information')], max_length=2, null=True)),
                ('data_contribution', models.CharField(blank=True, choices=[('E', 'Yes (Expert Opinion)'), ('R', 'Yes (Review Article)'), ('Q', 'Yes (Questionnaire)'), ('Y', 'Yes'), ('N', 'No')], max_length=1, null=True)),
                ('grade_primary', models.CharField(blank=True, choices=[('VERY LOW', 'Very Low'), ('LOW', 'Low'), ('MODERATE', 'Moderate'), ('HIGH', 'High'), ('VERY HIGH', 'Very High')], max_length=20, null=True)),
                ('grade_risk_bias', models.CharField(blank=True, choices=[('LIKELY', 'Likely'), ('VERY LIKELY', 'Very Likely')], max_length=20, null=True)),
                ('grade_imprecision', models.CharField(blank=True, choices=[('SERIOUS', 'Serious'), ('VERY SERIOUS', 'Very Serious')], max_length=20, null=True)),
                ('grade_rct_incon', models.CharField(blank=True, choices=[('SERIOUS', 'Serious'), ('VERY SERIOUS', 'Very Serious')], max_length=20, null=True)),
                ('grade_indir', models.CharField(blank=True, choices=[('SERIOUS', 'Serious'), ('VERY SERIOUS', 'Very Serious')], max_length=20, null=True)),
                ('grade_rct_limit', models.CharField(blank=True, choices=[('SERIOUS', 'Serious'), ('VERY SERIOUS', 'Very Serious')], max_length=20, null=True)),
                ('design_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('outcomes_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('followup_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('stats_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('study_size_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('clin_sig_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('clear_conc_yn', models.CharField(blank=True, choices=[('YES', 'Yes'), ('NO', 'No')], max_length=20, null=True)),
                ('safety', models.TextField(blank=True, null=True)),
                ('performance', models.TextField(blank=True, null=True)),
                ('adverse_events', models.TextField(blank=True, null=True)),
                ('sota', models.TextField(blank=True, null=True)),
                ('guidance', models.TextField(blank=True, null=True)),
                ('other', models.TextField(blank=True, null=True)),
                ('study_design', models.TextField(blank=True, null=True)),
                ('total_sample_size', models.TextField(blank=True, null=True)),
                ('objective', models.TextField(blank=True, null=True)),
                ('treatment_modality', models.TextField(blank=True, null=True)),
                ('study_conclusions', models.TextField(blank=True, null=True)),
                ('is_sota_article', models.BooleanField(blank=True, null=True)),
                ('outcome_measures', models.BooleanField(blank=True, null=True)),
                ('appropriate_followup', models.BooleanField(blank=True, null=True)),
                ('statistical_significance', models.BooleanField(blank=True, null=True)),
                ('clinical_significance', models.BooleanField(blank=True, null=True)),
                ('included', models.BooleanField(blank=True, null=True)),
                ('justification', models.TextField(blank=True, null=True)),
                ('article_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clin_lit_appr', to='lit_reviews.ArticleReview')),
            ],
        ),
        migrations.AddField(
            model_name='articlereview',
            name='search',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureSearch'),
        ),
        migrations.CreateModel(
            name='AdverseRecallSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_performed', models.DateTimeField(auto_now=True)),
                ('db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventDatabase')),
                ('literature_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
                ('product_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventProductCodes')),
                ('recalls', models.ManyToManyField(related_name='ae_recalls', to='lit_reviews.AdverseRecall')),
            ],
        ),
        migrations.CreateModel(
            name='AdverseRecallReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('IN', 'Included'), ('SM', 'Similar'), ('EX', 'Excluded or not Relevant'), ('UN', 'Not Reviewed')], default='UN', max_length=2)),
                ('ae', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ae_recalls_reviews', to='lit_reviews.AdverseRecall')),
                ('search', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseRecallSearch')),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEventSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_performed', models.DateTimeField(auto_now=True)),
                ('db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventDatabase')),
                ('events', models.ManyToManyField(related_name='ae_events', to='lit_reviews.AdverseEvent')),
                ('literature_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.LiteratureReview')),
                ('product_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventProductCodes')),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEventReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('IN', 'Included'), ('SM', 'Similar'), ('EX', 'Excluded or not Relevant'), ('UN', 'Not Reviewed')], default='UN', max_length=2)),
                ('ae', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ae_reviews', to='lit_reviews.AdverseEvent')),
                ('search', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventSearch')),
            ],
        ),
        migrations.AddField(
            model_name='adverseeventproductcodes',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventRegulatoryBody'),
        ),
        migrations.AddField(
            model_name='adverseevent',
            name='db',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit_reviews.AdverseEventDatabase'),
        ),
        migrations.AddConstraint(
            model_name='literaturesearch',
            constraint=models.UniqueConstraint(fields=('literature_review', 'term', 'db'), name='unique_term_source'),
        ),
        migrations.AddConstraint(
            model_name='literaturereviewsearchproposal',
            constraint=models.UniqueConstraint(fields=('literature_review', 'term', 'db'), name='unique_review_term'),
        ),
        migrations.AddConstraint(
            model_name='adverseeventproductcodes',
            constraint=models.UniqueConstraint(fields=('source', 'code'), name='unique_source_code'),
        ),
    ]
